diff --git a/qemu_mode/qemu-8.2.0/accel/tcg/cpu-exec.c b/qemu_mode/qemu-8.2.0/accel/tcg/cpu-exec.c
index c938eb96f..0d2572c12 100644
--- a/qemu_mode/qemu-8.2.0/accel/tcg/cpu-exec.c
+++ b/qemu_mode/qemu-8.2.0/accel/tcg/cpu-exec.c
@@ -45,6 +45,8 @@
 #include "internal-common.h"
 #include "internal-target.h"
 
+#include "../patches/afl-qemu-cpu-inl.h"
+
 /* -icount align implementation. */
 
 typedef struct SyncClocks {
@@ -449,6 +451,7 @@ cpu_tb_exec(CPUState *cpu, TranslationBlock *itb, int *tb_exit)
     uintptr_t ret;
     TranslationBlock *last_tb;
     const void *tb_ptr = itb->tc.ptr;
+    vaddr pc = log_pc(cpu, itb);
 
     if (qemu_loglevel_mask(CPU_LOG_TB_CPU | CPU_LOG_EXEC)) {
         log_cpu_exec(log_pc(cpu, itb), cpu, itb);
@@ -486,13 +489,16 @@ cpu_tb_exec(CPUState *cpu, TranslationBlock *itb, int *tb_exit)
             cc->set_pc(cpu, last_tb->pc);
         }
         if (qemu_loglevel_mask(CPU_LOG_EXEC)) {
-            vaddr pc = log_pc(cpu, last_tb);
+            pc = log_pc(cpu, last_tb);
             if (qemu_log_in_addr_range(pc)) {
                 qemu_log("Stopped execution of TB chain before %p [%016"
                          VADDR_PRIx "] %s\n",
                          last_tb->tc.ptr, pc, lookup_symbol(pc));
             }
         }
+    } else {
+        // qemu_log("AFL_QEMU_CPU_SNIPPET2(env:%p, pc:%p)\n", env, (void*)pc);
+        AFL_QEMU_CPU_SNIPPET2(env, pc);
     }
 
     /*
@@ -504,6 +510,8 @@ cpu_tb_exec(CPUState *cpu, TranslationBlock *itb, int *tb_exit)
         cpu->exception_index = EXCP_DEBUG;
         cpu_loop_exit(cpu);
     }
+    if(afl_wants_cpu_to_stop)
+        cpu->exit_request = 1;
 
     return last_tb;
 }
@@ -597,6 +605,7 @@ void cpu_exec_step_atomic(CPUState *cpu)
         if (tb == NULL) {
             mmap_lock();
             tb = tb_gen_code(cpu, pc, cs_base, flags, cflags);
+            AFL_QEMU_CPU_SNIPPET1;
             mmap_unlock();
         }
 
@@ -1004,6 +1013,7 @@ cpu_exec_loop(CPUState *cpu, SyncClocks *sc)
 
                 mmap_lock();
                 tb = tb_gen_code(cpu, pc, cs_base, flags, cflags);
+                AFL_QEMU_CPU_SNIPPET1;
                 mmap_unlock();
 
                 /*
@@ -1033,11 +1043,15 @@ cpu_exec_loop(CPUState *cpu, SyncClocks *sc)
                 last_tb = NULL;
             }
 #endif
+/*
+ * chaining complicates AFL's instrumentation so we disable it
+ */
+#ifdef NOPE_NOT_NEVER
             /* See if we can patch the calling TB. */
             if (last_tb) {
                 tb_add_jump(last_tb, tb_exit, tb);
             }
-
+#endif
             cpu_loop_exec_tb(cpu, tb, pc, &last_tb, &tb_exit);
 
             /* Try to align the host and virtual clocks
